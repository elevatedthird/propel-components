/*!********************************************************************************************************************************************************************************************************************************************************************************!*\
  !*** css ./node_modules/css-loader/dist/cjs.js??ruleSet[1].rules[2].use[1]!./node_modules/postcss-loader/dist/cjs.js??ruleSet[1].rules[2].use[2]!./node_modules/sass-loader/dist/cjs.js??ruleSet[1].rules[2].use[3]!./source/02-components/03-formations/section/section.scss ***!
  \********************************************************************************************************************************************************************************************************************************************************************************/
/*
  Prints the color state for each tag presented or uses the default selectors
  See /00-config/settings/_typography.scss
 */
.container-narrow,
.container-narrow-fluid,
.container-narrow-xxl,
.container-narrow-xl,
.container-narrow-lg,
.container-narrow-md,
.container-narrow-sm {
  --bs-gutter-x: 1.5rem;
  --bs-gutter-y: 0;
  width: 100%;
  padding-right: calc(var(--bs-gutter-x) * 0.5);
  padding-left: calc(var(--bs-gutter-x) * 0.5);
  margin-right: auto;
  margin-left: auto;
}

@media (min-width: 640px) {
  .container-narrow-sm, .container-narrow {
    max-width: 540px;
  }
}
@media (min-width: 768px) {
  .container-narrow-md, .container-narrow-sm, .container-narrow {
    max-width: 720px;
  }
}
@media (min-width: 1024px) {
  .container-narrow-lg, .container-narrow-md, .container-narrow-sm, .container-narrow {
    max-width: 960px;
  }
}
@media (min-width: 1366px) {
  .container-narrow-xl, .container-narrow-lg, .container-narrow-md, .container-narrow-sm, .container-narrow {
    max-width: 1140px;
  }
}
.container-narrow-xl, .container-narrow-lg, .container-narrow-md, .container-narrow-sm, .container-narrow {
  max-width: 1320px;
}

.layout {
  --block-spacing: 80px;
  padding: calc(var(--block-spacing) / 2) 0;
}
.layout .block {
  margin-bottom: var(--block-spacing);
}
.layout .block:first-child {
  margin-top: 0;
}
.layout .block:last-child {
  margin-bottom: 0;
}
.layout .block.block--section-intro {
  --block-spacing: 16px;
}

.layout.surface--light + .layout.surface--light {
  padding-top: 0;
}

.layout.surface--light--text-color + .layout.surface--light--text-color {
  padding-top: 0;
}

.layout.surface--light--background-colors + .layout.surface--light--background-colors {
  padding-top: 0;
}

.layout.surface--dark + .layout.surface--dark {
  padding-top: 0;
}

.layout.surface--dark--text-color + .layout.surface--dark--text-color {
  padding-top: 0;
}

.layout.surface--dark--background-colors + .layout.surface--dark--background-colors {
  padding-top: 0;
}

/*# sourceMappingURL=data:application/json;charset=utf-8;base64,*/